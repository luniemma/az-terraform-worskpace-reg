# Terraform Mixed OS VM Deployment

This Terraform project deploys a set of virtual machines with different operating systems (Windows, Ubuntu, and Red Hat Enterprise Linux) in Microsoft Azure. It also sets up the necessary networking infrastructure.

## Project Structure

The project consists of the following files:

- `main.tf`: Main Terraform configuration file
- `variables.tf`: Variable definitions
- `outputs.tf`: Output definitions
- `terraform.tfvars`: Variable values
- `vm-SR.tf`: Additional configuration for VM Site Recovery (not directly used in main deployment)

## Prerequisites

- [Terraform](https://www.terraform.io/downloads.html) installed (version ~> 2.65)
- An Azure subscription
- Azure CLI installed and authenticated

## Configuration

1. Clone this repository to your local machine.
2. Navigate to the project directory.
3. Review and modify the `terraform.tfvars` file to customize your deployment. Be sure to change the `admin_password` to a secure value.

## Deployment

To deploy the infrastructure:

1. Initialize Terraform:
   ```
   terraform init
   ```

2. Review the planned changes:
   ```
   terraform plan
   ```

3. Apply the configuration:
   ```
   terraform apply
   ```

4. When prompted, type `yes` to confirm the deployment.

## Resources Created

This Terraform configuration creates the following resources:

- 1 Resource Group
- 1 Virtual Network with 1 Subnet
- 1 Windows Server VM
- 2 Ubuntu Server VMs
- 1 Red Hat Enterprise Linux VM
- Associated network interfaces and public IP addresses

## Outputs

After a successful deployment, Terraform will output the following information:

- Windows VM ID and Public IP
- Ubuntu VMs IDs and Public IPs
- RHEL VM ID and Public IP

## Clean Up

To destroy the created resources and avoid unnecessary costs:

```
terraform destroy
```

When prompted, type `yes` to confirm the deletion of resources.

## Note on VM-SR.tf

The `vm-SR.tf` file contains additional configuration for VM Site Recovery. This file is not directly used in the main deployment but can be integrated if you want to set up disaster recovery for your VMs.

## Security Note

Remember to keep your `terraform.tfvars` file secure and never commit it to version control with sensitive information like passwords. Consider using Azure Key Vault or environment variables for managing sensitive data in production environments.

The README includes sections on:

Project structure
Prerequisites
Configuration
Deployment instructions
Resources created
Outputs
Clean-up instructions
A note on the vm-SR.tf file
Security considerations